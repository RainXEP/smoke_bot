import threading
import telebot
from telebot import apihelper

import time
import random

# from config.cfg import basic_config

import requests
import json
import anectodes
import logging

apihelper.READ_TIMEOUT = 35
apihelper.CONNECT_TIMEOUT = 35

bot = telebot.TeleBot("6896373452:AAFgVQcGNIfaG09TCdGPeh_TLKsmnsptP2U")
GEMINI_API_KEY = "AIzaSyBpknvRWrw0qtI7JRl3W9xUt9c9VFpnlkM"

ongoing_polls = {}

# Dictionary to store start times of smoking sessions
start_times = {}

smoke_food_topic_id = 54  # 61

logging.basicConfig(level=logging.INFO)


def call_gemini_api(query):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GEMINI_API_KEY}"
    headers = {
        "Content-Type": "application/json"
    }
    payload = {
        "contents": [
            {"parts": [{"text": query}]}
        ]
    }
    try:
        response = requests.post(url, json=payload, headers=headers)
        response_data = response.json()
        return response_data['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        print(f"Response: {response.text}")
        print(e)
        return "–ê? –ù–µ —É—Å–ª—ã—à–∞–ª, –µ—â–µ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏, –±—Ä–∞—Ç"


@bot.message_handler(commands=['bot'])
def handle_command(message):

    query = message.text.split(maxsplit=1)
    if len(query) > 1:
        response = call_gemini_api(query[1])
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ –º–Ω–µ —é–∑–∞–π /bot {—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å}")


# jokes_url = ['https://v2.jokeapi.dev/joke/Programming,Miscellaneous,Dark,Spooky?format=txt', 'https://icanhazdadjoke.com/']

@bot.message_handler(commands=['joke'])
def send_joke(message):
    chat_id = message.chat.id
    logging.info(f"Received 'joke' command from {chat_id} and topic_id: {smoke_food_topic_id}")
    # headers = {'Accept': 'text/plain'}
    # response = requests.get(url=random.choice(jokes_url), headers=headers)
    # joke = response.text
    bot.send_message(chat_id, random.choice(anectodes.mega_jokes), message_thread_id=smoke_food_topic_id)


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    logging.info(f"Received 'start' command from {chat_id} and topic_id: {smoke_food_topic_id}")

    bot.reply_to(message, "–ó–¥–∞—Ä–æ–≤–∞ –±–∞–Ω–¥–∏—Ç—ã. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –≤–≤–æ–¥–∏ /help")


# Function to handle the SMOKE button press
@bot.message_handler(commands=['smoke'])
def start_smoke_poll(message):
    chat_id = message.chat.id
    logging.info(f"Received 'smoke' command from {chat_id} and topic_id: {smoke_food_topic_id}")
    if chat_id not in ongoing_polls:
        # Start a new poll
        poll_message = bot.send_poll(message.chat.id, "it's time to smoke",
                                     options=['Go-Go-Go üèÉ‚Äç', '–ù–µ—Ç, —è "–æ—á–µ–Ω—å" –∑–∞–Ω—è—Ç üôÖ', '–£–∂–µ —Ç—É—Ç üëã'],
                                     is_anonymous=False,
                                     open_period=600,
                                     message_thread_id=smoke_food_topic_id)  # –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –≤–µ—Ç–∫–∞ smoke/food
        ongoing_polls[chat_id] = poll_message.poll.id
        start_times[chat_id] = time.time()

        # Set a timer to automatically stop the poll after 4 minutes
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∫—É—Ä –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç.",
                         message_thread_id=smoke_food_topic_id, disable_notification=True)
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫—É—Ä –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop",
                         message_thread_id=smoke_food_topic_id, disable_notification=True)
        bot.send_message(message.chat.id, "–ñ–¥–µ–º –º–∏–Ω—É—Ç—ã 3 –∏ –≤—ã—Ö–æ–¥–∏–º –Ω–∞ —É–ª–∏—Ü—É :)", message_thread_id=smoke_food_topic_id,
                         disable_notification=True)
        timer = threading.Timer(2700, stop_poll, args=[message])
        timer.start()

        # Set a timer to send a message after 3 minutes
        message_timer = threading.Timer(180, send_end_message, args=[chat_id])
        message_timer.start()
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.")


def send_end_message(chat_id):
    bot.send_message(chat_id, "–ë–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º, –º—ã –ø–æ—à–ª–∏ ;)", message_thread_id=smoke_food_topic_id)


def send_message_about_money(chat_id):
    bot.send_message(chat_id, "–ì–æ—Å–ø–æ–¥–∞, –ø—Ä–æ—Å—å–±–∞ —Å–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –æ–±–µ–¥, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–∫–∏–Ω—É–ª–∏",
                     message_thread_id=smoke_food_topic_id)


@bot.message_handler(commands=['stop'])
def stop_poll(message):
    chat_id = message.chat.id
    logging.info(f"Received 'stop-smoke' command from {chat_id} and topic_id: {smoke_food_topic_id}")
    if chat_id in ongoing_polls:
        start_time = start_times.get(chat_id, 0)
        current_time = time.time()
        duration = int(current_time - start_time)  # Duration in seconds
        minutes, seconds = divmod(duration, 60)
        bot.reply_to(message, f"–í—Å–µ–º —Å–ø–∞—Å–∏–±–æ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–∏–º –∑–∞–¥–∞—á–∞–º")
        del ongoing_polls[chat_id]
        del start_times[chat_id]
    else:
        bot.reply_to(message, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Ä–æ–≤.")


@bot.message_handler(commands=['alreadyopened'])
def already_opened_poll(message):
    chat_id = message.chat.id
    logging.info(f"Received 'alreadyOpened' command from {chat_id} topic_id: {smoke_food_topic_id}")
    if chat_id in ongoing_polls:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: True")
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: False")


@bot.message_handler(commands=['help'])
def help_command(message):
    chat_id = message.chat.id
    logging.info(f"Received 'help' command from {chat_id} topic_id: {smoke_food_topic_id}")
    help_text = "/smoke - –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ–∫—É—Ä–∞\n" \
                "/alreadyopened - —É–∑–Ω–∞—Ç—å, –Ω–∞—á–∞—Ç—ã –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å—ã\n" \
                "/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫—É—Ä\n" \
                "/food - –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞\n" \
                "/funny_function - ü§°\n" \
                "/joke - 500 –Ω–µ–ø—Ä–∏–ª–∏—á–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤\n" \
                "/bot {–∑–∞–ø—Ä–æ—Å} - –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ—á—Ç–∏ –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
    bot.reply_to(message, help_text)


ongoing_food_polls = {}


@bot.message_handler(commands=['food'])
def start_food_poll(message):
    chat_id = message.chat.id
    logging.info(f"Received 'food' command from {chat_id} topic_id: {smoke_food_topic_id}")
    if chat_id not in ongoing_food_polls:
        # Start a new food poll
        poll_message = bot.send_poll(chat_id, "–í—Ä–µ–º—è –æ–±–µ–¥–∞, –∫—É–¥–∞ –∏–¥–µ–º? ü§îüïêü•©",
                                     options=['–ë–µ—Å–∫–∞–∑–∞–Ω ü´ñ',
                                              '–°—Ç–æ–ª–æ–≤–∞—è –Ω–∞ –ê–±–∞—è-–ì–∞–≥–∞—Ä–∏–Ω–∞ ü•™',
                                              '–ê–ø—Ä–µ–ª—å ü§å',
                                              'Asian Barbeque üçú ü•¢',
                                              'Salsabil üòé',
                                              '–•–∞—Ä–µ–±–∞  ü•ü',
                                              '–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –¥–≤–æ—Ä üçñ',
                                              '–û–±–µ–¥ —Å —Å–æ–±–æ–π üåù / –ò–¥—É –æ–±–µ–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏',
                                              '–ù–∞ —Ö–∞—Ç–µ –ø–æ–æ–±–µ–¥–∞—é ‚úåÔ∏èüö∂‚Äç',
                                              '–ö–∞–ª—å—è–Ω —Ä–∞–∑–¥—É—Ç—å –≤ —á–∞–π—Ö–∞–Ω–µ ü§ô'],
                                     is_anonymous=False,
                                     message_thread_id=smoke_food_topic_id)
        ongoing_food_polls[chat_id] = poll_message.message_id

        timer = threading.Timer(900, stop_food_poll, args=[chat_id, poll_message.message_id])
        timer.start()
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ –æ–±–µ–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


def stop_food_poll(chat_id, message_id):
    if chat_id in ongoing_food_polls:
        poll_message_id = ongoing_food_polls.pop(chat_id)
        if poll_message_id:
            try:
                poll_results = bot.stop_poll(chat_id, message_id)
                if poll_results:
                    options_with_max_votes = [option for option in poll_results.options if option.voter_count == max(
                        option.voter_count for option in poll_results.options)]
                    filtered_options = [option for option in options_with_max_votes if
                                        option.text not in ['–û–±–µ–¥ —Å —Å–æ–±–æ–π üåù / –ò–¥—É –æ–±–µ–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏',
                                                            '–ù–∞ —Ö–∞—Ç–µ –ø–æ–æ–±–µ–¥–∞—é ‚úåÔ∏èüö∂‚Äç']]
                    if len(filtered_options) > 0:
                        winning_option = random.choice(filtered_options).text
                    else:
                        winning_option = random.choice(options_with_max_votes).text
                    bot.send_message(chat_id,
                                     f"–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ - —Ä–µ—à–∏–ª–∏ —á—Ç–æ {winning_option} –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!",
                                     message_thread_id=smoke_food_topic_id)
                   # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –æ–±–µ–¥
                    money_message_timer = threading.Timer(3600, send_message_about_money, args=[chat_id])
                    money_message_timer.start()
            except Exception as e:
                print("An error occurred while stopping the poll:", e)


@bot.message_handler(func=lambda message: True)
def handle_invalid_commands(message):
    chat_id = message.chat.id
    logging.info(f"Received 'funny_function' command from {chat_id} and topic_id: {smoke_food_topic_id}")
    if message.text.startswith('/'):
        bot.reply_to(message, "–•—É–π–Ω—é –Ω–µ –ø–∏—à–∏, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")
    if message.text.startswith('/funny_function'):
        bot.reply_to(message, "–ù–∏—á–µ–≥–æ —Ç—É—Ç –Ω–µ—Ç, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π ü´µ")


# Start the bot
def start_bot():
    while True:
        try:
            bot.remove_webhook()
            time.sleep(1)
            logging.info("Bot is starting...")
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"Bot crashed due to: {e}")
            time.sleep(10)


if __name__ == "__main__":
    start_bot()
