import threading
import telebot
import time
import random

bot = telebot.TeleBot('6896373452:AAFgVQcGNIfaG09TCdGPeh_TLKsmnsptP2U')

ongoing_polls = {}

# Dictionary to store start times of smoking sessions
start_times = {}


# Function to handle the /start command
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ó–¥–∞—Ä–æ–≤–∞ –±–∞–Ω–¥–∏—Ç—ã. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –≤–≤–æ–¥–∏ /help")


# Function to handle the SMOKE button press
@bot.message_handler(commands=['smoke'])
def start_smoke_poll(message):
    chat_id = message.chat.id
    if chat_id not in ongoing_polls:
        # Start a new poll
        poll_message = bot.send_poll(chat_id, "it's time to smoke",
                                     options=['Go-Go-Go üèÉ‚Äç', '–ù–µ—Ç, —è "–æ—á–µ–Ω—å" –∑–∞–Ω—è—Ç üôÖ', '–£–∂–µ —Ç—É—Ç üëã'],
                                     is_anonymous=False,
                                     open_period=600)  # 10 minutes
        ongoing_polls[chat_id] = poll_message.poll.id
        start_times[chat_id] = time.time()

        # Set a timer to automatically stop the poll after 4 minutes
        bot.send_message(chat_id, "–ü–µ—Ä–µ–∫—É—Ä –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç.")
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫—É—Ä –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop.")
        bot.send_message(chat_id, "–ñ–¥–µ–º –º–∏–Ω—É—Ç—ã 3 –∏ –≤—ã—Ö–æ–¥–∏–º –Ω–∞ —É–ª–∏—Ü—É :)")
        timer = threading.Timer(2700, stop_poll, args=[message])
        timer.start()

        # Set a timer to send a message after 3 minutes
        message_timer = threading.Timer(180, send_end_message, args=[chat_id])
        message_timer.start()
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞.")


def send_end_message(chat_id):
    bot.send_message(chat_id, "–ë–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º, –º—ã –ø–æ—à–ª–∏ ;) ")


# Function to handle poll updates
@bot.message_handler(content_types=['poll'])
def handle_poll_update(poll):
    chat_id = poll.chat.id
    poll_id = poll.id

    if chat_id in ongoing_polls.values() and poll_id == ongoing_polls[chat_id]:
        # Check if poll is closed
        if poll.is_closed:
            # Get the number of votes for each option
            option_votes = {option.text: option.voter_count for option in poll.options}

            # Check if any option received 100% votes
            if option_votes.get('–ì–æ-–≥–æ-–≥–æ', 0) == poll.total_voter_count:
                bot.send_message(chat_id, "–í—Å–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
                # Start counting time spent in break
                start_times[chat_id] = time.time()
            elif option_votes.get('–ì–æ-–≥–æ-–≥–æ', 0) == 1:
                bot.send_message(chat_id, "–°–æ—Ä—Ä–∏, —Ç—ã –æ–¥–∏–Ω–æ–∫, –∫—É—Ä–∏ —Å–∞–º")
            else:
                # Send users who voted for '–ì–æ-–≥–æ-–≥–æ'
                users_voted = [user.user for user in poll.options[0].voters]
                for user in users_voted:
                    bot.send_message(chat_id, f"{user.first_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –ø–æ–∫—É—Ä–∏—Ç—å, –∫—Ä–∞—Å–∞–≤–∞")
                users_voted_no = [user.user for user in poll.options[1].voters]
                for user in users_voted_no:
                    bot.send_message(chat_id, f"{user.first_name} –ø–∏–∑–¥–µ—Ü –∫–∞–∫ —Å–∏–ª—å–Ω–æ –∑–∞–Ω—è—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤—ã–π–¥–µ—Ç")


@bot.message_handler(commands=['stop'])
def stop_poll(message):
    chat_id = message.chat.id
    if chat_id in ongoing_polls:
        start_time = start_times.get(chat_id, 0)
        current_time = time.time()
        duration = int(current_time - start_time)  # Duration in seconds
        minutes, seconds = divmod(duration, 60)
        bot.reply_to(message, f"–í—Ä–µ–º—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä: {minutes:02d}:{seconds:02d}")
        del ongoing_polls[chat_id]
        del start_times[chat_id]
    else:
        bot.reply_to(message, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Ä–æ–≤.")


@bot.message_handler(commands=['alreadyopened'])
def already_opened_poll(message):
    chat_id = message.chat.id
    if chat_id in ongoing_polls:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: True")
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: False")


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = "/smoke - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å\n" \
                "/alreadyopened - –£–∑–Ω–∞—Ç—å, –Ω–∞—á–∞—Ç—ã –ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –æ–ø—Ä–æ—Å—ã\n" \
                "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–∫—É—Ä\n" \
                "/food - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–ª—è –æ–±–µ–¥–∞\n" \
                "/funny_function - ü§°"
    bot.reply_to(message, help_text)


ongoing_food_polls = {}


@bot.message_handler(commands=['food'])
def start_food_poll(message):
    chat_id = message.chat.id
    if chat_id not in ongoing_food_polls:
        # Start a new food poll
        poll_message = bot.send_poll(chat_id, "–í—Ä–µ–º—è –æ–±–µ–¥–∞, —á—Ç–æ –¥–µ–ª–∞–µ–º? ü§îüïêü•©",
                                     options=['–ë–µ—Å–∫–∞–∑–∞–Ω (–ü–ª–æ–≤-–ª–∞–≥–º–∞–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ, –¥–µ—à–µ–≤–æ –∏ –±—ã—Å—Ç—Ä–æ) ü´ñ',
                                              '–°—Ç–æ–ª–æ–≤–∞—è –Ω–∞ –ê–±–∞—è-–ì–∞–≥–∞—Ä–∏–Ω–∞ (–¥–∂–∞—Å—Ç —ç —Ä–µ–≥—É–ª—è—Ä —Å—Ç–æ–ª–æ–≤–∞—è, –≤–∞—Ä–∏–∞–Ω—Ç –ø–ª–æ—Ç–Ω–æ–≥–æ –∏ –Ω–µ–¥–æ—Ä–æ–≥–æ –æ–±–µ–¥–∞) ü•™',
                                              '–ê–ø—Ä–µ–ª—å (–∞ –∫–æ–≥–¥–∞ –Ω–µ –æ–±–µ–¥–∞–ª–∏) ü§å',
                                              'Asian Barbeque (—á—Ç–æ-—Ç–æ –Ω–∞ –∞–∑–∏–∞—Ç—Å–∫–æ–º) üçú ü•¢',
                                              '–æ–±–µ–¥ —Å —Å–æ–±–æ–π üåù ',
                                              'Sorry guys, ORAZA üïå',
                                              '–ù–∞ —Ö–∞—Ç–µ –ø–æ–æ–±–µ–¥–∞—é ‚úåÔ∏èüö∂‚Äç',
                                              '–ö–∞–ª—å—è–Ω —Ä–∞–∑–¥—É—Ç—å –≤ —á–∞–π—Ö–∞–Ω–µ ü§ô'],
                                     is_anonymous=False)
        ongoing_food_polls[chat_id] = poll_message.message_id

        timer = threading.Timer(1200, stop_food_poll, args=[chat_id, poll_message.message_id])  # –ò –∑–¥–µ—Å—å
        timer.start()
    else:
        bot.reply_to(message, "–û–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞ –æ–±–µ–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


def stop_food_poll(chat_id, message_id):
    if chat_id in ongoing_food_polls:
        poll_message_id = ongoing_food_polls.pop(chat_id)
        if poll_message_id:
            try:
                poll_results = bot.stop_poll(chat_id, message_id)
                if poll_results:
                    options_with_max_votes = [option for option in poll_results.options if option.voter_count == max(
                        option.voter_count for option in poll_results.options)]
                    filtered_options = [option for option in options_with_max_votes if
                                        option.text not in ['–æ–±–µ–¥ —Å —Å–æ–±–æ–π üåù ', 'Sorry guys, ORAZA üïå',
                                                            '–ù–∞ —Ö–∞—Ç–µ –ø–æ–æ–±–µ–¥–∞—é ‚úåÔ∏èüö∂‚Äç']]
                    if len(filtered_options) > 0:
                        winning_option = random.choice(filtered_options).text
                    else:
                        winning_option = random.choice(options_with_max_votes).text
                    bot.send_message(chat_id, f"–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ - —Ä–µ—à–∏–ª–∏ —á—Ç–æ {winning_option} –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")
            except Exception as e:
                print("An error occurred while stopping the poll:", e)


@bot.message_handler(func=lambda message: True)
def handle_invalid_commands(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "–•—É–π–Ω—é –Ω–µ –ø–∏—à–∏, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")
    if message.text.startswith('/funny_function'):
        bot.reply_to(message, "–ù–∏—á–µ–≥–æ —Ç—É—Ç –Ω–µ—Ç, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π ü´µ")


# Start the bot
bot.polling()
